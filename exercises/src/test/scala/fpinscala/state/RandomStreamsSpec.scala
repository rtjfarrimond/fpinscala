package fpinscala.state

import fpinscala.laziness.Stream
import fpinscala.state.RNG.Simple
import org.scalatest.matchers.should.Matchers
import org.scalatest.flatspec.AnyFlatSpec

class RandomStreamsSpec extends AnyFlatSpec with Matchers {

  private val seed = 42
  private val randomStreams = RandomStreams(seed)
  private val streamLength = 1000

  "randomIntStream" should "generate the same stream of integers as multiple calls to rng using returned rng state" in {
    val rng0: RNG = Simple(seed)
    val (int1, rng1) = RNG.int(rng0)
    val (int2, rng2) = RNG.int(rng1)
    val (int3, rng3) = RNG.int(rng2)
    val (int4, rng4) = RNG.int(rng3)
    val (int5, _) = RNG.int(rng4)
    val expected = Stream[Int](int1, int2, int3, int4, int5)
    val actual = randomStreams.randomIntStream.take(5)

    actual shouldBe expected
  }

  "randomNonNegativeIntStream" should "contain the absolute values of the stream generated by randomIntStream" in {
    val ints = randomStreams.randomIntStream.take(streamLength)
    ints.exists(_ < 0) shouldBe true

    val expected = ints.map(math.abs)
    val actual = randomStreams.randomNonNegativeIntStream.take(streamLength)

    actual shouldBe expected
  }

  "randomDoubleStream" should "generate a stream of doubles between 0 and 1 exclusive" in {
    val doubles = randomStreams.randomDoubleStream.take(streamLength).toList

    all (doubles) should be > 0.0
    all (doubles) should be < 1.0
  }

}
